{"ast":null,"code":"/** Provides details of continuous extracted tail */\nclass ContinuousTailDetails {\n  /** Tail value as string */\n\n  /** Tail start position */\n\n  /** Start position */\n  constructor() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let stop = arguments.length > 2 ? arguments[2] : undefined;\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n\n  toString() {\n    return this.value;\n  }\n\n  extend(tail) {\n    this.value += String(tail);\n  }\n\n  appendTo(masked) {\n    return masked.append(this.toString(), {\n      tail: true\n    }).aggregate(masked._appendPlaceholder());\n  }\n\n  get state() {\n    return {\n      value: this.value,\n      from: this.from,\n      stop: this.stop\n    };\n  }\n\n  set state(state) {\n    Object.assign(this, state);\n  }\n\n  unshift(beforePos) {\n    if (!this.value.length || beforePos != null && this.from >= beforePos) return '';\n    const shiftChar = this.value[0];\n    this.value = this.value.slice(1);\n    return shiftChar;\n  }\n\n  shift() {\n    if (!this.value.length) return '';\n    const shiftChar = this.value[this.value.length - 1];\n    this.value = this.value.slice(0, -1);\n    return shiftChar;\n  }\n\n}\n\nexport { ContinuousTailDetails as default };","map":{"version":3,"sources":["C:/Programacao/CCB/Web/node_modules/imask/esm/core/continuous-tail-details.js"],"names":["ContinuousTailDetails","constructor","value","arguments","length","undefined","from","stop","toString","extend","tail","String","appendTo","masked","append","aggregate","_appendPlaceholder","state","Object","assign","unshift","beforePos","shiftChar","slice","shift","default"],"mappings":"AAAA;AACA,MAAMA,qBAAN,CAA4B;AAC1B;;AAEA;;AAEA;AAEAC,EAAAA,WAAW,GAAG;AACZ,QAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,QAAIG,IAAI,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAA/E;AACA,QAAII,IAAI,GAAGJ,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAjD;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKI,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AACDC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKN,KAAZ;AACD;;AACDO,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,SAAKR,KAAL,IAAcS,MAAM,CAACD,IAAD,CAApB;AACD;;AACDE,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACf,WAAOA,MAAM,CAACC,MAAP,CAAc,KAAKN,QAAL,EAAd,EAA+B;AACpCE,MAAAA,IAAI,EAAE;AAD8B,KAA/B,EAEJK,SAFI,CAEMF,MAAM,CAACG,kBAAP,EAFN,CAAP;AAGD;;AACQ,MAALC,KAAK,GAAG;AACV,WAAO;AACLf,MAAAA,KAAK,EAAE,KAAKA,KADP;AAELI,MAAAA,IAAI,EAAE,KAAKA,IAFN;AAGLC,MAAAA,IAAI,EAAE,KAAKA;AAHN,KAAP;AAKD;;AACQ,MAALU,KAAK,CAACA,KAAD,EAAQ;AACfC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,KAApB;AACD;;AACDG,EAAAA,OAAO,CAACC,SAAD,EAAY;AACjB,QAAI,CAAC,KAAKnB,KAAL,CAAWE,MAAZ,IAAsBiB,SAAS,IAAI,IAAb,IAAqB,KAAKf,IAAL,IAAae,SAA5D,EAAuE,OAAO,EAAP;AACvE,UAAMC,SAAS,GAAG,KAAKpB,KAAL,CAAW,CAAX,CAAlB;AACA,SAAKA,KAAL,GAAa,KAAKA,KAAL,CAAWqB,KAAX,CAAiB,CAAjB,CAAb;AACA,WAAOD,SAAP;AACD;;AACDE,EAAAA,KAAK,GAAG;AACN,QAAI,CAAC,KAAKtB,KAAL,CAAWE,MAAhB,EAAwB,OAAO,EAAP;AACxB,UAAMkB,SAAS,GAAG,KAAKpB,KAAL,CAAW,KAAKA,KAAL,CAAWE,MAAX,GAAoB,CAA/B,CAAlB;AACA,SAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWqB,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAb;AACA,WAAOD,SAAP;AACD;;AA/CyB;;AAkD5B,SAAStB,qBAAqB,IAAIyB,OAAlC","sourcesContent":["/** Provides details of continuous extracted tail */\nclass ContinuousTailDetails {\n  /** Tail value as string */\n\n  /** Tail start position */\n\n  /** Start position */\n\n  constructor() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let stop = arguments.length > 2 ? arguments[2] : undefined;\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n  toString() {\n    return this.value;\n  }\n  extend(tail) {\n    this.value += String(tail);\n  }\n  appendTo(masked) {\n    return masked.append(this.toString(), {\n      tail: true\n    }).aggregate(masked._appendPlaceholder());\n  }\n  get state() {\n    return {\n      value: this.value,\n      from: this.from,\n      stop: this.stop\n    };\n  }\n  set state(state) {\n    Object.assign(this, state);\n  }\n  unshift(beforePos) {\n    if (!this.value.length || beforePos != null && this.from >= beforePos) return '';\n    const shiftChar = this.value[0];\n    this.value = this.value.slice(1);\n    return shiftChar;\n  }\n  shift() {\n    if (!this.value.length) return '';\n    const shiftChar = this.value[this.value.length - 1];\n    this.value = this.value.slice(0, -1);\n    return shiftChar;\n  }\n}\n\nexport { ContinuousTailDetails as default };\n"]},"metadata":{},"sourceType":"module"}