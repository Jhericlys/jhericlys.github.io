{"ast":null,"code":"import { DIRECTION } from './utils.js';\nimport './change-details.js';\nimport './holder.js';\n/** Provides details of changing input */\n\nclass ActionDetails {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n  constructor(value, cursorPos, oldValue, oldSelection) {\n    this.value = value;\n    this.cursorPos = cursorPos;\n    this.oldValue = oldValue;\n    this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\n\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n  /**\n    Start changing position\n    @readonly\n  */\n\n\n  get startChangePos() {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n  /**\n    Inserted symbols count\n    @readonly\n  */\n\n\n  get insertedCount() {\n    return this.cursorPos - this.startChangePos;\n  }\n  /**\n    Inserted symbols\n    @readonly\n  */\n\n\n  get inserted() {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n  /**\n    Removed symbols count\n    @readonly\n  */\n\n\n  get removedCount() {\n    // Math.max for opposite operation\n    return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\n    this.oldValue.length - this.value.length, 0);\n  }\n  /**\n    Removed symbols\n    @readonly\n  */\n\n\n  get removed() {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n  /**\n    Unchanged head symbols\n    @readonly\n  */\n\n\n  get head() {\n    return this.value.substring(0, this.startChangePos);\n  }\n  /**\n    Unchanged tail symbols\n    @readonly\n  */\n\n\n  get tail() {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n  /**\n    Remove direction\n    @readonly\n  */\n\n\n  get removeDirection() {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right\n\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) && // if not range removed (event with backspace)\n    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n  }\n\n}\n\nexport { ActionDetails as default };","map":{"version":3,"sources":["C:/Programacao/CCB/Web/node_modules/imask/esm/core/action-details.js"],"names":["DIRECTION","ActionDetails","constructor","value","cursorPos","oldValue","oldSelection","slice","startChangePos","start","Math","min","insertedCount","inserted","substr","removedCount","max","end","length","removed","head","substring","tail","removeDirection","NONE","RIGHT","LEFT","default"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAO,qBAAP;AACA,OAAO,aAAP;AAEA;;AACA,MAAMC,aAAN,CAAoB;AAClB;;AAEA;;AAEA;;AAEA;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,YAA7B,EAA2C;AACpD,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB,CAJoD,CAMpD;;AACA,WAAO,KAAKH,KAAL,CAAWI,KAAX,CAAiB,CAAjB,EAAoB,KAAKC,cAAzB,MAA6C,KAAKH,QAAL,CAAcE,KAAd,CAAoB,CAApB,EAAuB,KAAKC,cAA5B,CAApD,EAAiG;AAC/F,QAAE,KAAKF,YAAL,CAAkBG,KAApB;AACD;AACF;AAED;AACF;AACA;AACA;;;AACoB,MAAdD,cAAc,GAAG;AACnB,WAAOE,IAAI,CAACC,GAAL,CAAS,KAAKP,SAAd,EAAyB,KAAKE,YAAL,CAAkBG,KAA3C,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACmB,MAAbG,aAAa,GAAG;AAClB,WAAO,KAAKR,SAAL,GAAiB,KAAKI,cAA7B;AACD;AAED;AACF;AACA;AACA;;;AACc,MAARK,QAAQ,GAAG;AACb,WAAO,KAAKV,KAAL,CAAWW,MAAX,CAAkB,KAAKN,cAAvB,EAAuC,KAAKI,aAA5C,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACkB,MAAZG,YAAY,GAAG;AACjB;AACA,WAAOL,IAAI,CAACM,GAAL,CAAS,KAAKV,YAAL,CAAkBW,GAAlB,GAAwB,KAAKT,cAA7B,IAChB;AACA,SAAKH,QAAL,CAAca,MAAd,GAAuB,KAAKf,KAAL,CAAWe,MAF3B,EAEmC,CAFnC,CAAP;AAGD;AAED;AACF;AACA;AACA;;;AACa,MAAPC,OAAO,GAAG;AACZ,WAAO,KAAKd,QAAL,CAAcS,MAAd,CAAqB,KAAKN,cAA1B,EAA0C,KAAKO,YAA/C,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACU,MAAJK,IAAI,GAAG;AACT,WAAO,KAAKjB,KAAL,CAAWkB,SAAX,CAAqB,CAArB,EAAwB,KAAKb,cAA7B,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACU,MAAJc,IAAI,GAAG;AACT,WAAO,KAAKnB,KAAL,CAAWkB,SAAX,CAAqB,KAAKb,cAAL,GAAsB,KAAKI,aAAhD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACqB,MAAfW,eAAe,GAAG;AACpB,QAAI,CAAC,KAAKR,YAAN,IAAsB,KAAKH,aAA/B,EAA8C,OAAOZ,SAAS,CAACwB,IAAjB,CAD1B,CAGpB;;AACA,WAAO,CAAC,KAAKlB,YAAL,CAAkBW,GAAlB,KAA0B,KAAKb,SAA/B,IAA4C,KAAKE,YAAL,CAAkBG,KAAlB,KAA4B,KAAKL,SAA9E,KACP;AACA,SAAKE,YAAL,CAAkBW,GAAlB,KAA0B,KAAKX,YAAL,CAAkBG,KAFrC,GAE6CT,SAAS,CAACyB,KAFvD,GAE+DzB,SAAS,CAAC0B,IAFhF;AAGD;;AA3FiB;;AA8FpB,SAASzB,aAAa,IAAI0B,OAA1B","sourcesContent":["import { DIRECTION } from './utils.js';\nimport './change-details.js';\nimport './holder.js';\n\n/** Provides details of changing input */\nclass ActionDetails {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n\n  constructor(value, cursorPos, oldValue, oldSelection) {\n    this.value = value;\n    this.cursorPos = cursorPos;\n    this.oldValue = oldValue;\n    this.oldSelection = oldSelection;\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n\n  /**\n    Start changing position\n    @readonly\n  */\n  get startChangePos() {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n\n  /**\n    Inserted symbols count\n    @readonly\n  */\n  get insertedCount() {\n    return this.cursorPos - this.startChangePos;\n  }\n\n  /**\n    Inserted symbols\n    @readonly\n  */\n  get inserted() {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n\n  /**\n    Removed symbols count\n    @readonly\n  */\n  get removedCount() {\n    // Math.max for opposite operation\n    return Math.max(this.oldSelection.end - this.startChangePos ||\n    // for Delete\n    this.oldValue.length - this.value.length, 0);\n  }\n\n  /**\n    Removed symbols\n    @readonly\n  */\n  get removed() {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n\n  /**\n    Unchanged head symbols\n    @readonly\n  */\n  get head() {\n    return this.value.substring(0, this.startChangePos);\n  }\n\n  /**\n    Unchanged tail symbols\n    @readonly\n  */\n  get tail() {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n\n  /**\n    Remove direction\n    @readonly\n  */\n  get removeDirection() {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n    // align right if delete at right\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n    // if not range removed (event with backspace)\n    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n  }\n}\n\nexport { ActionDetails as default };\n"]},"metadata":{},"sourceType":"module"}