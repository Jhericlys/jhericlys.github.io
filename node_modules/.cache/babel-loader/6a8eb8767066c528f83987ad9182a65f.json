{"ast":null,"code":"import { a as _objectDestructuringEmpty } from './_rollupPluginBabelHelpers-2cac7098.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask/esm/imask'; // TODO should be imported from core\n\nconst MASK_PROPS = {\n  // common\n  mask: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([Date, Number, IMask.Masked]), PropTypes.instanceOf(IMask.Masked)]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['typed'])]),\n  prepare: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['shift'])]),\n  eager: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['append', 'remove'])]),\n  skipInvalid: PropTypes.bool,\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n  // pattern\n  placeholderChar: PropTypes.string,\n  displayChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['pad'])]),\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  signed: PropTypes.bool,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),\n  max: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),\n  // dynamic\n  dispatch: PropTypes.func,\n  // ref\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })])\n};\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS).filter(p => p !== 'value');\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName => NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0); // TODO\n// 1. seems like it's wrong to have Opts as only mask options. Other component/input props should also be there. Where is \"unmask\" prop for instance?\n// 2. Unmask should be infered from Opts (see https://github.com/uNmAnNeR/imaskjs/issues/554#issuecomment-1114014010)\n\nfunction IMaskMixin(ComposedComponent) {\n  const MaskedComponent = class extends React.Component {\n    constructor(props) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n\n    componentDidMount() {\n      if (!this.props.mask) return;\n      this.initMask();\n    }\n\n    componentDidUpdate() {\n      const props = this.props;\n\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions);\n          if ('value' in props) this.maskValue = props.value;\n        } else {\n          this.initMask(maskOptions);\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) this.element.value = props.value;\n      }\n    }\n\n    componentWillUnmount() {\n      this.destroyMask();\n    }\n\n    _inputRef(el) {\n      this.element = el;\n\n      if (this.props.inputRef) {\n        if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current')) this.props.inputRef.current = el;else this.props.inputRef(el);\n      }\n    }\n\n    initMask() {\n      let maskOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._extractMaskOptionsFromProps(this.props);\n      this.maskRef = IMask(this.element, maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n\n    destroyMask() {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n\n    _extractMaskOptionsFromProps(props) {\n      const cloneProps = Object.assign({}, (_objectDestructuringEmpty(props), props)); // keep only mask options props\n\n      Object.keys(cloneProps) // TODO why need cast to string?\n      .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop) < 0).forEach(nonMaskProp => {\n        delete cloneProps[nonMaskProp];\n      }); // TODO type actually should be IMask.DeduceMasked<Opts>\n\n      return cloneProps;\n    }\n\n    _extractNonMaskProps(props) {\n      const cloneProps = Object.assign({}, (_objectDestructuringEmpty(props), props));\n      MASK_PROPS_NAMES.forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n      return cloneProps;\n    }\n\n    get maskValue() {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue;\n      if (this.props.unmask) return this.maskRef.unmaskedValue;\n      return this.maskRef.value;\n    }\n\n    set maskValue(value) {\n      value = value == null && this.props.unmask !== 'typed' ? '' : value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value;else if (this.props.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;\n    }\n\n    _onAccept(e) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n\n    _onComplete(e) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n\n    render() {\n      return React.createElement(ComposedComponent, Object.assign({}, this._extractNonMaskProps(this.props), {\n        inputRef: this._inputRef\n      }));\n    }\n\n  };\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = \"IMask(\".concat(nestedComponentName, \")\");\n  MaskedComponent.propTypes = MASK_PROPS;\n  return React.forwardRef((props, ref) => React.createElement(MaskedComponent, Object.assign({}, props, {\n    ref\n  })));\n}\n\nexport { IMaskMixin as default };","map":{"version":3,"sources":["C:/Programacao/CCB/Web/node_modules/react-imask/esm/mixin.js"],"names":["a","_objectDestructuringEmpty","React","PropTypes","IMask","MASK_PROPS","mask","oneOfType","array","func","string","instanceOf","RegExp","oneOf","Date","Number","Masked","value","any","unmask","bool","prepare","validate","commit","overwrite","eager","skipInvalid","onAccept","onComplete","placeholderChar","displayChar","lazy","definitions","object","blocks","pattern","format","parse","autofix","radix","thousandsSeparator","mapToRadix","arrayOf","scale","number","signed","normalizeZeros","padFractionalZeros","min","max","dispatch","inputRef","shape","current","MASK_PROPS_NAMES","Object","keys","filter","p","NON_MASK_OPTIONS_PROPS_NAMES","MASK_OPTIONS_PROPS_NAMES","pName","indexOf","IMaskMixin","ComposedComponent","MaskedComponent","Component","constructor","props","_inputRef","bind","componentDidMount","initMask","componentDidUpdate","maskOptions","_extractMaskOptionsFromProps","maskRef","updateOptions","maskValue","destroyMask","element","componentWillUnmount","el","prototype","hasOwnProperty","call","arguments","length","undefined","on","_onAccept","_onComplete","destroy","cloneProps","assign","prop","forEach","nonMaskProp","_extractNonMaskProps","maskProp","typedValue","unmaskedValue","e","render","createElement","nestedComponentName","displayName","name","concat","propTypes","forwardRef","ref","default"],"mappings":"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","sourcesContent":["import { a as _objectDestructuringEmpty } from './_rollupPluginBabelHelpers-2cac7098.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask/esm/imask';\n\n// TODO should be imported from core\n\nconst MASK_PROPS = {\n  // common\n  mask: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([Date, Number, IMask.Masked]), PropTypes.instanceOf(IMask.Masked)]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['typed'])]),\n  prepare: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['shift'])]),\n  eager: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['append', 'remove'])]),\n  skipInvalid: PropTypes.bool,\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n  // pattern\n  placeholderChar: PropTypes.string,\n  displayChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['pad'])]),\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  signed: PropTypes.bool,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),\n  max: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),\n  // dynamic\n  dispatch: PropTypes.func,\n  // ref\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })])\n};\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS).filter(p => p !== 'value');\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName => NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0);\n// TODO\n// 1. seems like it's wrong to have Opts as only mask options. Other component/input props should also be there. Where is \"unmask\" prop for instance?\n// 2. Unmask should be infered from Opts (see https://github.com/uNmAnNeR/imaskjs/issues/554#issuecomment-1114014010)\nfunction IMaskMixin(ComposedComponent) {\n  const MaskedComponent = class extends React.Component {\n    constructor(props) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n    componentDidMount() {\n      if (!this.props.mask) return;\n      this.initMask();\n    }\n    componentDidUpdate() {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions);\n          if ('value' in props) this.maskValue = props.value;\n        } else {\n          this.initMask(maskOptions);\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) this.element.value = props.value;\n      }\n    }\n    componentWillUnmount() {\n      this.destroyMask();\n    }\n    _inputRef(el) {\n      this.element = el;\n      if (this.props.inputRef) {\n        if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current')) this.props.inputRef.current = el;else this.props.inputRef(el);\n      }\n    }\n    initMask() {\n      let maskOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._extractMaskOptionsFromProps(this.props);\n      this.maskRef = IMask(this.element, maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n    destroyMask() {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n    _extractMaskOptionsFromProps(props) {\n      const cloneProps = Object.assign({}, (_objectDestructuringEmpty(props), props));\n\n      // keep only mask options props\n      Object.keys(cloneProps)\n      // TODO why need cast to string?\n      .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop) < 0).forEach(nonMaskProp => {\n        delete cloneProps[nonMaskProp];\n      });\n\n      // TODO type actually should be IMask.DeduceMasked<Opts>\n      return cloneProps;\n    }\n    _extractNonMaskProps(props) {\n      const cloneProps = Object.assign({}, (_objectDestructuringEmpty(props), props));\n      MASK_PROPS_NAMES.forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n      return cloneProps;\n    }\n    get maskValue() {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue;\n      if (this.props.unmask) return this.maskRef.unmaskedValue;\n      return this.maskRef.value;\n    }\n    set maskValue(value) {\n      value = value == null && this.props.unmask !== 'typed' ? '' : value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value;else if (this.props.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;\n    }\n    _onAccept(e) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n    _onComplete(e) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n    render() {\n      return React.createElement(ComposedComponent, Object.assign({}, this._extractNonMaskProps(this.props), {\n        inputRef: this._inputRef\n      }));\n    }\n  };\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = \"IMask(\".concat(nestedComponentName, \")\");\n  MaskedComponent.propTypes = MASK_PROPS;\n  return React.forwardRef((props, ref) => React.createElement(MaskedComponent, Object.assign({}, props, {\n    ref\n  })));\n}\n\nexport { IMaskMixin as default };\n"]},"metadata":{},"sourceType":"module"}